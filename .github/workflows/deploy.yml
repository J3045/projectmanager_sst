name: Deploy to SST (AWS)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      # Install project dependencies
      - name: Install dependencies
        run: npm install --force

      # Ensure .env file is created
      - name: Create .env file
        run: |
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "AUTH_SECRET=${{ secrets.AUTH_SECRET }}" >> .env
          echo "AUTH_DISCORD_ID=${{ secrets.AUTH_DISCORD_ID }}" >> .env
          echo "AUTH_DISCORD_SECRET=${{ secrets.AUTH_DISCORD_SECRET }}" >> .env
          echo "DIRECT_URL=${{ secrets.DIRECT_URL }}" >> .env

      # Debug: Check available CloudFormation stacks
      - name: Debug CloudFormation Stacks
        run: |
          echo "Listing all CloudFormation stacks..."
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE --region ap-south-1

      # Get SST stack name dynamically
      - name: Get SST Stack Name
        run: |
          STACK_NAME=$(aws cloudformation list-stacks \
            --stack-status-filter CREATE_COMPLETE \
            --query "StackSummaries[?contains(StackName, 'sst')].StackName | [0]" \
            --output text --region ap-south-1)
          
          if [[ -z "$STACK_NAME" || "$STACK_NAME" == "None" ]]; then
            echo "Error: SST stack not found!"
            exit 1
          fi
          
          echo "Found SST Stack: $STACK_NAME"
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      # Get API Gateway URL from CloudFormation
      - name: Get API Gateway URL
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" \
            --output text --region ap-south-1)
          
          if [[ -z "$API_URL" || "$API_URL" == "None" ]]; then
            echo "Error: API Gateway URL not found!"
            exit 1
          fi
          
          echo "API Gateway URL: $API_URL"
          echo "API_URL=$API_URL" >> $GITHUB_ENV

      # Deploy to AWS with SST
      - name: Deploy to AWS with SST
        run: |
          echo "Deploying to AWS..."
          npx sst deploy --stage prod --verbose
    
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-south-1'
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
          AUTH_DISCORD_ID: ${{ secrets.AUTH_DISCORD_ID }}
          AUTH_DISCORD_SECRET: ${{ secrets.AUTH_DISCORD_SECRET }}
          DIRECT_URL: ${{ secrets.DIRECT_URL }}

      # ðŸš€ Invalidate CloudFront Cache
      - name: Invalidate CloudFront Cache
        run: |
          echo "Invalidating CloudFront cache..."
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-south-1'

      # Notify on deployment success
      - name: Notify on deployment success
        run: echo "Deployment to AWS was successful!"
