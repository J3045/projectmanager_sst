generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  preferences    Json?
  accounts       Account[]
  sessions       Session[]
  authoredTasks  Task[]    @relation("TaskAuthor")
  assignedTasks  Task[]    @relation("TaskAssignee")
  teams          Team[]    @relation("TeamToUser")

  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id                   Int           @id @default(autoincrement())
  teamName             String
  productOwnerUserId   String?
  projectManagerUserId String?
  projects             ProjectTeam[]
  users                User[]        @relation("TeamToUser")

  @@index([teamName])
}

model Project {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  teams       ProjectTeam[]
  tasks       Task[]

  @@index([name])
}

model ProjectTeam {
  id        Int     @id @default(autoincrement())
  teamId    Int
  projectId Int
  project   Project @relation(fields: [projectId], references: [id])
  team      Team    @relation(fields: [teamId], references: [id])
}

model Task {
  id            Int           @id @default(autoincrement())
  title         String
  description   String?
  status        TaskStatus?
  priority      TaskPriority?
  tags          String?
  startDate     DateTime?
  dueDate       DateTime?
  points        Int?
  projectId     Int
  authorUserId  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  author        User          @relation("TaskAuthor", fields: [authorUserId], references: [id])
  project       Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedUsers User[]        @relation("TaskAssignee")

  @@index([projectId, status, priority])
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
